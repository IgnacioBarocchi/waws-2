import "./App.css";

import {
  useCallback,
  useRef,
  MouseEvent as ReactMouseEvent,
  TouchEvent as ReactTouchEvent,
  useMemo,
} from "react";

import {
  HandleType,
  ReactFlow,
  ReactFlowProvider,
  useEdgesState,
  useNodesState,
} from "reactflow";

import GameEngine from "./services/@GameEngine";
import GameTrigger from "./trigger/GameTrigger";
import ObjectManager from "./services/ObjectManager";
import NodeComponents from "./components/NodeTypes/NodeComponents";
import { UI } from "./components/UI";

// * Initialize
const objectManager = new ObjectManager("DEV", {});
// todo: improve observables
const gameTrigger = new GameTrigger(objectManager);
const engine = new GameEngine(objectManager);

const selectedBuilding = "PlantFactory";

// ! crea una plant factory
gameTrigger.trigger("start game");

function App() {
  const reactFlowWrapper = useRef(null);

  const connectingNodeId = useRef(null);

  const [nodes, setNodes, onNodesChange] = useNodesState(
    objectManager.getData()
  );
  engine.setNodes = setNodes;

  const [edges, setEdges, onEdgesChange] = useEdgesState(
    objectManager.getEdges()
  );
  engine.setEdges = setEdges;

  // * Load custom nodes
  const nodeTypes = useMemo(() => NodeComponents, []);

  const onConnectStart = useCallback(
    (
      _: ReactMouseEvent | ReactTouchEvent,
      {
        nodeId,
      }: {
        nodeId: string | null;
        handleId: string | null;
        handleType: HandleType | null;
      }
    ) => {
      //@ts-ignore
      connectingNodeId.current = nodeId;
    },
    []
  );

  const onConnectEnd = useCallback(
    engine.getOnConnectEndCallback(
      connectingNodeId,
      reactFlowWrapper,
      selectedBuilding
    ),
    [selectedBuilding]
  );

  return (
    <ReactFlowProvider>
      <UI tick={0} dayTime={"Day"} />

      <div className="wrapper" ref={reactFlowWrapper}>
        <ReactFlow
          // @ts-ignore
          nodeTypes={nodeTypes}
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onConnectStart={onConnectStart}
          style={{ backgroundColor: "#254117" }}
          fitView
          // onConnect={onConnect}
          onConnectEnd={onConnectEnd}
        ></ReactFlow>
      </div>
    </ReactFlowProvider>
  );
}

export default App;

/*
onNodeClick={(_, node) => {
  dispatch({
    type: "SET_SELECTED_UNIT",
    payload: SentientUnit.getSentientUnitInstance(
      node.id
    ) as SentientUnit,
  });
}}
*/
