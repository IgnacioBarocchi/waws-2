/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 public/assets/models/Wolf.glb -t -r public
*/

import * as THREE from "three";
import { useAnimations, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useEffect, useRef } from "react";

type GLTFResult = GLTF & {
  nodes: {
    Wolf_1: THREE.SkinnedMesh;
    Wolf_2: THREE.SkinnedMesh;
    Wolf_3: THREE.SkinnedMesh;
    Wolf_4: THREE.SkinnedMesh;
    Body: THREE.Bone;
    IKBackLegL: THREE.Bone;
    IKFrontLegL: THREE.Bone;
    IKBackLegR: THREE.Bone;
    IKFrontLegR: THREE.Bone;
  };
  materials: {
    Main: THREE.MeshStandardMaterial;
    Main_Light: THREE.MeshStandardMaterial;
    Eyes_Black: THREE.MeshStandardMaterial;
    Nose: THREE.MeshStandardMaterial;
  };
};

type ActionName =
  | "Attack"
  | "Death"
  | "Eating"
  | "Gallop"
  | "Gallop_Jump"
  | "Idle_HitReact_Left"
  | "Idle_HitReact_Right"
  | "Jump_ToIdle"
  | "Walk"
  | "Idle_2_HeadLow"
  | "Idle_2"
  | "Idle"
  | "AnimalArmature|Attack"
  | "AnimalArmature|Death"
  | "AnimalArmature|Eating"
  | "AnimalArmature|Gallop"
  | "AnimalArmature|Gallop_Jump"
  | "AnimalArmature|Idle"
  | "AnimalArmature|Idle_2"
  | "AnimalArmature|Idle_2_HeadLow"
  | "AnimalArmature|Idle_HitReact_Left"
  | "AnimalArmature|Idle_HitReact_Right"
  | "AnimalArmature|Jump_ToIdle"
  | "AnimalArmature|Walk";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(
    "/assets/models/Wolf.glb"
  ) as GLTFResult;
  // @ts-ignore
  const { actions } = useAnimations<GLTFActions>(animations, group);
  useEffect(() => {
    // @ts-ignore
    actions.Gallop.play();
  }, []);
  return (
    // @ts-ignore
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group
            name="AnimalArmature"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <primitive object={nodes.Body} />
            <primitive object={nodes.IKBackLegL} />
            <primitive object={nodes.IKFrontLegL} />
            <primitive object={nodes.IKBackLegR} />
            <primitive object={nodes.IKFrontLegR} />
          </group>
          <group
            name="Wolf"
            // @ts-ignore
            rotation={[-Math.PI / 2, 0, props?.turnAngle ? props.turnAngle : 0]}
            scale={100}
          >
            <skinnedMesh
              name="Wolf_1"
              geometry={nodes.Wolf_1.geometry}
              material={materials.Main}
              skeleton={nodes.Wolf_1.skeleton}
            />
            <skinnedMesh
              name="Wolf_2"
              geometry={nodes.Wolf_2.geometry}
              material={materials.Main_Light}
              skeleton={nodes.Wolf_2.skeleton}
            />
            <skinnedMesh
              name="Wolf_3"
              geometry={nodes.Wolf_3.geometry}
              material={materials.Eyes_Black}
              skeleton={nodes.Wolf_3.skeleton}
            />
            <skinnedMesh
              name="Wolf_4"
              geometry={nodes.Wolf_4.geometry}
              material={materials.Nose}
              skeleton={nodes.Wolf_4.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/assets/models/Wolf.glb");
